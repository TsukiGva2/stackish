from typing import final, override

from stackish_input import ReadLine


class ConditionalREPL:
    """
    Read
    Eval
    Print
    Loop

    Conditional means it has to
    keep running under a certain
    condition
    """

    def __init__(self): ...

    def read(self): ...
    def eval(self): ...

    # def print(self): ...

    @final
    def loop(self):
        while ...:
            self.read()
            self.eval()

            # self.print()

            if not self.condition():
                return

    def condition(self): ...


# TODO: @WIP @DESIGN
#  This class is a MESS
#  it needs to be adapted so it
#  works more integrated with the Forth
#  runtime

# HOW IT CURRENTLY WORKS:
#   - Reads command
#   - Parse forth * OR * run command

#  @FORTH:Compiler
#   - Word -> is quote? is colon? is endcolon? is literal?
#  @FORTH:Runtime
#   - Run instructions generated by Compiler

#   IF instruction = SHELL
#        |
#   THEN | this gets called
#        V


@final
class Shell(ConditionalREPL):
    def __init__(self, engine):
        self.engine = engine

        self.prompt: str = "- "
        self.status: int = 1  # TODO: enum like

    def build_command(self, line: str):
        return self.engine.compile(line)

    @override
    def eval(self):
        self.status = self.engine.execute(self.command)

    @override
    def read(self):
        line = str(ReadLine(self.prompt))
        self.command = self.build_command(line)

    @override
    def condition(self) -> bool:  # TODO
        return True
